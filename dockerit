#!/usr/bin/env bash
usage=\
"Usage: dockint from <image>
    or: dockint start <image> [homedir]
    or: dockint stop <image>
    or: dockint run <image> <cmd>

    Work interactively with a docker container as if it's environment were on the host system.
    You work as your current user, all devices are available, and ports running in the container are shared with the host.
    
    1. from <image>               : build a docker container starting with the provided image (e.g ubuntu:focal)
    2. start <image> [homedir]    : start the docker container, optionally mounting homedir as your home directory
    3. stop <image>               : stop the docker container
    4. run <image> <cmd>          : run the command specified by <cmd> in the container corresponding to <image>.
       For example, bash or zsh (which will be launched interactively).
       If the container has not been built in will be built.
       If the container has not been started it will be started with a default home directory of ~/dockerhome if it exists.
       The container follows the naming pattern $image:dock, but can be directly specified by setting the container environment variable:
       container=containername dockint start image
"

# determine if we need to use sudo when calling docker
if groups $USER | grep -q docker;
then
    DOCKER=docker
else
    DOCKER="sudo docker"
fi    

# set the container name
image=$2
cmd=$3

if [[ -z $container ]]
then
    container=$image:dock
fi

# build the docker image
function docker_build_image {
        $DOCKER build --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$USER --build-arg BASE=$image --tag "$image" .
    if [ $? -ne 0 ]; then
        echo "Failed to create docker image $image."
        exit 1
    fi
}

# start the docker container
function docker_container_start {
    # run docker, giving it access to the specified devices and X windows
    # the cap-add and security-opt lets me use gdb to debug ros nodes
    # if $homedir does not exist, nothing will be mounted but the command will
    # still work
    xhost +local:root
    $DOCKER run -itd --rm --name "$container" \
         --hostname "$HOST" \
         -v $homedir:/home/$USER \
         -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 \
         -v /etc/machine-id:/etc/machine-id \
         -v /var/run/dbus:/var/run/dbus \
         --device /dev/dri \
         --cap-add=SYS_PTRACE \
         --security-opt seccomp=unconfined \
         --privileged \
         --network=host \
         -v /dev/:/dev \
         -v $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR \
         -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
         "$image"

    if [ $? -ne 0 ]; then
        echo "Failed to start docker container $container."
        exit 1
    fi
}
case $1 in
    from)
        docker_build_image
        exit 0
        ;;
    start)
        docker_container_start
        exit 0
        ;;
    stop)
        $DOCKER stop "$container"
        exit $?
        ;;
    run)
        # check if the docker image has been created and if not create one
        if [ -z "$($DOCKER images -q $image)" ]; then
            docker_build_image
        fi
        # check if the docker image is running and if not start it
        if [ -z "$($DOCKER ps -q -f NAME=$container)" ]; then
            if [ -z $homedir ]; then
                homedir=~/melodic
            fi
            if [ ! -d $homedir ]; then
                echo "The directory $homedir, to be mounted in the container at /home/$USER, does not exist."
                read -r -p "Would you like to create it [y/N]? (Otherwise /home/$USER will be in the container only) " response
                case "$response" in
                    [yY])
                        mkdir -p $homedir
                    ;;
                    *)
                        # docker creates non-existant directories automatically, so set this to empty to prevent that
                        homedir=""
                esac
            fi
            docker_container_start
        fi
        # issue a command in the container
        $DOCKER exec -ti "$container" $@
        ;;
    "")
        printf "$usage"
        exit 0
        ;;
esac
