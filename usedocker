#!/usr/bin/env bash
# Used for mannaging the docker image of the development environment more conveniently
# To see how to use this file, call it with no arguments

# the name of the docker image
if [ -z $image ]; then
    image="melodic:dev"
fi

if [ -z $container ]; then
    container="melodic"
fi

homedir=$2

usage=\
"Usage: usedocker build
    or: usedocker start [homedir]
    or: usedocker stop
    or: usedocker <cmd>

    Start a ROS docker container designed for interactive use.

    1. build: build the docker container
    2. start: start the docker container, optionally mounting homedir as your home directory
    3. stop:  stop the docker container
    4. <cmd>: run the command specified by <cmd> in the container.
       For example, bash or zsh (which will be launched interactively).
       If the container has not been built in will be built.
       If the container has not been started it will be started with a default home directory of ~/melodic.
"


# build the docker image
function docker_build_image {
        sudo docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$USER --tag "$image" .
    if [ $? -ne 0 ]; then
        echo "Failed to create docker image $image."
        exit 1
    fi
}

# start the docker container
function docker_container_start {
    # run docker, giving it access to the specified devices and X windows
    # the cap-add and security-opt lets me use gdb to debug ros nodes
    # if $homedir does not exist, nothing will be mounted but the command will
    # still work
    xhost +local:root
    sudo docker run -itd --rm --name "$container" \
         -v $homedir:/home/$USER \
         -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 \
         -v /etc/machine-id:/etc/machine-id \
         -v /var/run/dbus:/var/run/dbus \
         --device /dev/dri \
         --cap-add=SYS_PTRACE \
         --security-opt seccomp=unconfined \
         --privileged \
         -v /dev/:/dev \
         "$image"

    if [ $? -ne 0 ]; then
        echo "Failed to start docker container $container."
        exit 1
    fi
}
case $1 in
    build)
        docker_build_image
        exit 0
        ;;
    start)
        docker_container_start
        exit 0
        ;;
    stop)
        sudo docker stop "$container"
        exit $?
        ;;
    "")
        printf "$usage"
        exit 0
        ;;
    *)
        # check if the docker image has been created and if not create one
        if [ -z "$(sudo docker images -q $image)" ]; then
            docker_build_image
        fi
        # check if the docker image is running and if not start it
        if [ -z "$(sudo docker ps -q -f NAME=$container)" ]; then
            if [ -z $homedir ]; then
                homedir=~/melodic
            fi
            if [ ! -d $homedir ]; then
                echo "The directory $homedir, to be mounted in the container at /home/$USER, does not exist."
                read -r -p "Would you like to create it [y/N]? (Otherwise /home/$USER will be in the container only) " response
                case "$response" in
                    [yY])
                        mkdir -p $homedir
                    ;;
                    *)
                        # docker creates non-existant directories automatically, so set this to empty to prevent that
                        homedir=""
                esac
            fi
            docker_container_start
        fi
        # issue a command in the container
        sudo docker exec -ti "$container" $@
        ;;
esac
